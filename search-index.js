var searchIndex = JSON.parse('{\
"argmin":{"doc":"A pure Rust optimization framework","t":[0,0,0,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,4,13,13,3,0,3,3,12,0,3,3,3,4,13,12,13,12,13,12,13,12,13,12,13,12,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,8,10,8,10,8,10,8,10,8,10,8,10,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,10,3,3,4,13,13,3,3,3,12,3,3,8,11,11,3,4,13,13,13,13,3,12,12,12,12,12,12,3,12,12,4,13,13,13,3,5,4,13,13,13,13,13,13,13,13,13,13,8,8,16,16,16,16,16,11,11,11,11,11,8,18,10,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,8,10,8,10,0,0,8,10,10,0,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,5,8,10,8,10,0,8,10,10,10,10,10,10,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,8,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,0,8,10,11,10,8,10,11,11,5,5,0,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,0,8,16,10,0,8,16,10,8,10,0,8,10,8,10,8,10,0,8,10,10,8,10,8,10,8,10,0,8,10,8,10,8,10,8,10,8,10,8,10,0,8,16,10,5,5,0,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,8,10,10,10,10,10,5,5,5,8,8,16,10,8,8,8,8,8,8,4,13,13,3,12,5,5,5,8,10,10,8,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,5,8,10,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,8,10,8,11,11,11,11,10,11,11,11,11,11,10,11,11,11,5,5,8,10,11,11,8,10,11,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,16,10,8,16,10,8,10,8,10,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,8,10,5,5,8,16,10,5,5,5,8,10,10,10,10,10,8,0,0,4,13,3,11,0,0,3,11,11,11,11,0,3,11,11,11,0,3,11,3,11,3,11,3,11,0,0,3,11,11,0,3,11,11,11,0,3,11,11,0,0,3,11,0,3,11,0,0,3,11,11,0,8,10,10,3,11,3,11,3,11,3,11,0,3,11,11,11,11,11,11,11,11,0,3,11,11,11,0,3,11,11,11,11,11,11,11,0,0,3,11,11,11,0,3,11,11,0,3,11,8,3,12,12,0,0,3,11,11,11,0,3,11,11,0,3,11,11,11,0,3,11,11,11,11,0,3,11,11,11,11,11,11,0,4,13,13,13,3,11,11,11,11,11,11,11,0,0,3,11,0,3,11,0,3,11,11,11,0,3,11,11,11,11,5,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["core","macros","executor","Executor","op","new","from_checkpoint","run","add_observer","max_iters","target_cost","cost","grad","hessian","jacobian","checkpoint_dir","checkpoint_name","checkpoint_mode","ctrlc","timer","file","WriteToFileSerializer","Bincode","JSON","WriteToFile","slog_logger","ArgminSlogLogger","ArgminSlogKV","kv","visualizer","Visualizer3d","Surface","Error","ArgminError","InvalidParameter","text","NotImplemented","text","NotInitialized","text","ConditionViolated","text","CheckpointNotFound","text","ImpossibleError","text","IterState","param","prev_param","best_param","prev_best_param","cost","prev_cost","best_cost","prev_best_cost","target_cost","grad","prev_grad","hessian","prev_hessian","jacobian","prev_jacobian","population","iter","last_best_iter","max_iters","cost_func_count","grad_func_count","hessian_func_count","jacobian_func_count","modify_func_count","time","termination_reason","ArgminKV","kv","ArgminDot","dot","ArgminWeightedDot","weighted_dot","ArgminZero","zero","ArgminConj","conj","ArgminZeroLike","zero_like","ArgminEye","eye","eye_like","ArgminAdd","add","ArgminSub","sub","ArgminMul","mul","ArgminDiv","div","ArgminScaledAdd","scaled_add","ArgminScaledSub","scaled_sub","ArgminNorm","norm","ArgminTranspose","t","ArgminInv","inv","ArgminRandom","rand_from_range","ArgminMinMax","min","max","NoOperator","MinimalNoOperator","WriteToFileSerializer","Bincode","JSON","WriteToFile","ArgminSlogLogger","ArgminSlogKV","kv","Visualizer3d","Surface","Observe","observe_init","observe_iter","Observer","ObserverMode","Never","Always","Every","NewBest","OpWrapper","op","cost_func_count","grad_func_count","hessian_func_count","jacobian_func_count","modify_func_count","ArgminResult","operator","state","CheckpointMode","Never","Every","Always","ArgminCheckpoint","load_checkpoint","TerminationReason","NotTerminated","MaxItersReached","TargetCostReached","TargetPrecisionReached","NoChangeInCost","AcceptedStallIterExceeded","BestStallIterExceeded","LineSearchConditionMet","TargetToleranceReached","Aborted","ArgminFloat","ArgminOp","Param","Output","Hessian","Jacobian","Float","apply","gradient","hessian","jacobian","modify","Solver","NAME","next_iter","init","terminate_internal","terminate","ArgminIterData","new","param","cost","grad","hessian","jacobian","population","kv","termination_reason","get_param","get_cost","get_grad","get_hessian","get_jacobian","get_population","get_termination_reason","get_kv","ArgminLineSearch","set_search_direction","set_init_alpha","ArgminTrustRegion","set_radius","ArgminNLCGBetaUpdate","update","prelude","bounds","Bounded","min_value","max_value","cast","ToPrimitive","to_isize","to_i8","to_i16","to_i32","to_i64","to_i128","to_usize","to_u8","to_u16","to_u32","to_u64","to_u128","to_f32","to_f64","FromPrimitive","from_isize","from_i8","from_i16","from_i32","from_i64","from_i128","from_usize","from_u8","from_u16","from_u32","from_u64","from_u128","from_f32","from_f64","cast","NumCast","from","AsPrimitive","as_","float","FloatCore","infinity","neg_infinity","nan","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","min","max","recip","powi","to_degrees","to_radians","integer_decode","Float","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","FloatConst","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG2_E","PI","SQRT_2","TAU","LOG10_2","LOG2_10","identities","Zero","zero","set_zero","is_zero","One","one","set_one","is_one","zero","one","int","PrimInt","count_ones","count_zeros","leading_zeros","trailing_zeros","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","from_be","from_le","to_be","to_le","pow","ops","checked","CheckedAdd","checked_add","CheckedSub","checked_sub","CheckedMul","checked_mul","CheckedDiv","checked_div","CheckedRem","checked_rem","CheckedNeg","checked_neg","CheckedShl","checked_shl","CheckedShr","checked_shr","inv","Inv","Output","inv","mul_add","MulAdd","Output","mul_add","MulAddAssign","mul_add_assign","overflowing","OverflowingAdd","overflowing_add","OverflowingSub","overflowing_sub","OverflowingMul","overflowing_mul","saturating","Saturating","saturating_add","saturating_sub","SaturatingAdd","saturating_add","SaturatingSub","saturating_sub","SaturatingMul","saturating_mul","wrapping","WrappingAdd","wrapping_add","WrappingSub","wrapping_sub","WrappingMul","wrapping_mul","WrappingNeg","wrapping_neg","WrappingShl","wrapping_shl","WrappingShr","wrapping_shr","pow","Pow","Output","pow","pow","checked_pow","real","Real","min_value","min_positive_value","epsilon","max_value","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","sign","Signed","abs","abs_sub","signum","is_positive","is_negative","abs","abs_sub","signum","Unsigned","Num","FromStrRadixErr","from_str_radix","NumOps","NumRef","RefNum","NumAssignOps","NumAssign","NumAssignRef","FloatErrorKind","Empty","Invalid","ParseFloatError","kind","clamp","clamp_min","clamp_max","Bounded","min_value","max_value","Float","nan","infinity","neg_infinity","neg_zero","min_value","min_positive_value","epsilon","max_value","is_nan","is_infinite","is_finite","is_normal","classify","floor","ceil","round","trunc","fract","abs","signum","is_sign_positive","is_sign_negative","mul_add","recip","powi","powf","sqrt","exp","exp2","ln","log","log2","log10","to_degrees","to_radians","max","min","abs_sub","cbrt","hypot","sin","cos","tan","asin","acos","atan","atan2","sin_cos","exp_m1","ln_1p","sinh","cosh","tanh","asinh","acosh","atanh","integer_decode","FloatConst","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","LN_10","LN_2","LOG10_E","LOG2_E","PI","SQRT_2","TAU","LOG10_2","LOG2_10","cast","AsPrimitive","as_","FromPrimitive","from_isize","from_i8","from_i16","from_i32","from_i64","from_i128","from_usize","from_u8","from_u16","from_u32","from_u64","from_u128","from_f32","from_f64","NumCast","from","ToPrimitive","to_isize","to_i8","to_i16","to_i32","to_i64","to_i128","to_usize","to_u8","to_u16","to_u32","to_u64","to_u128","to_f32","to_f64","one","zero","One","one","set_one","is_one","Zero","zero","set_zero","is_zero","PrimInt","count_ones","count_zeros","leading_zeros","trailing_zeros","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","from_be","from_le","to_be","to_le","pow","CheckedAdd","checked_add","CheckedDiv","checked_div","CheckedMul","checked_mul","CheckedNeg","checked_neg","CheckedRem","checked_rem","CheckedShl","checked_shl","CheckedShr","checked_shr","CheckedSub","checked_sub","Inv","Output","inv","MulAdd","Output","mul_add","MulAddAssign","mul_add_assign","Saturating","saturating_add","saturating_sub","SaturatingAdd","saturating_add","SaturatingMul","saturating_mul","SaturatingSub","saturating_sub","WrappingAdd","wrapping_add","WrappingMul","wrapping_mul","WrappingNeg","wrapping_neg","WrappingShl","wrapping_shl","WrappingShr","wrapping_shr","WrappingSub","wrapping_sub","checked_pow","pow","Pow","Output","pow","abs","abs_sub","signum","Signed","abs","abs_sub","signum","is_positive","is_negative","Unsigned","solver","brent","BrentError","WrongSign","Brent","new","conjugategradient","cg","ConjugateGradient","new","p","p_prev","residual","nonlinear_cg","NonlinearConjugateGradient","new","restart_iters","restart_orthogonality","beta","FletcherReeves","new","PolakRibiere","new","PolakRibierePlus","new","HestenesStiefel","new","gaussnewton","gaussnewton_linesearch","GaussNewtonLS","new","with_tol","gaussnewton_method","GaussNewton","new","with_gamma","with_tol","goldensectionsearch","GoldenSectionSearch","new","tolerance","gradientdescent","steepestdescent","SteepestDescent","new","landweber","Landweber","new","linesearch","backtracking","BacktrackingLineSearch","new","rho","condition","LineSearchCondition","eval","requires_cur_grad","ArmijoCondition","new","WolfeCondition","new","StrongWolfeCondition","new","GoldsteinCondition","new","hagerzhang","HagerZhangLineSearch","new","delta","sigma","epsilon","theta","gamma","eta","alpha","morethuente","MoreThuenteLineSearch","new","c","alpha","neldermead","NelderMead","new","with_initial_params","sd_tolerance","alpha","gamma","rho","sigma","newton","newton_cg","NewtonCG","new","curvature_threshold","with_tol","newton_method","Newton","new","set_gamma","particleswarm","ParticleSwarm","new","Position","Particle","position","cost","quasinewton","bfgs","BFGS","new","with_tol_grad","with_tol_cost","dfp","DFP","new","with_tol_grad","lbfgs","LBFGS","new","with_tol_grad","with_tol_cost","sr1","SR1","new","r","with_tol_grad","with_tol_cost","sr1_trustregion","SR1TrustRegion","new","hessian","r","radius","eta","with_tol_grad","simulatedannealing","SATempFunc","TemperatureFast","Boltzmann","Exponential","SimulatedAnnealing","new","temp_func","stall_accepted","stall_best","reannealing_fixed","reannealing_accepted","reannealing_best","trustregion","cauchypoint","CauchyPoint","new","dogleg","Dogleg","new","steihaug","Steihaug","new","epsilon","max_iters","trustregion_method","TrustRegion","new","radius","max_radius","eta","reduction_ratio","make_kv","check_param","trait_bound","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","inlined_clone","to_subset","is_in_subset","to_subset_unchecked","from_subset","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","to_subset","is_in_subset","to_subset_unchecked","from_subset","fmt","fmt","fmt","as_ref","as_ref","deref_mut","from","fmt","drop","fmt","deref","observe_iter","observe_init","observe_iter","observe_iter","observe_init","observe_iter","apply","gradient","hessian","modify","apply","gradient","hessian","modify","apply","gradient","hessian","jacobian","modify","init","next_iter","init","next_iter","init","next_iter","next_iter","terminate","next_iter","terminate","init","next_iter","next_iter","next_iter","init","next_iter","terminate","init","next_iter","terminate","init","next_iter","init","next_iter","terminate","next_iter","terminate","next_iter","init","next_iter","init","next_iter","terminate","init","next_iter","terminate","init","next_iter","terminate","init","next_iter","terminate","init","next_iter","terminate","init","next_iter","terminate","next_iter","terminate","next_iter","terminate","init","next_iter","terminate","init","next_iter","terminate","set_search_direction","set_init_alpha","set_search_direction","set_init_alpha","set_search_direction","set_init_alpha","set_radius","set_radius","set_radius","update","update","update","update","eval","requires_cur_grad","eval","requires_cur_grad","eval","requires_cur_grad","eval","requires_cur_grad","from","extend","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","ne","eq","ne","eq","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","from_iter","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","serialize","serialize","new","param","best_param","cost","best_cost","grad","hessian","jacobian","population","target_cost","max_iters","last_best_iter","termination_reason","time","get_param","get_prev_param","get_best_param","get_prev_best_param","get_cost","get_prev_cost","get_best_cost","get_prev_best_cost","get_target_cost","get_cost_func_count","get_grad_func_count","get_hessian_func_count","get_jacobian_func_count","get_modify_func_count","get_last_best_iter","get_termination_reason","get_time","get_grad","get_prev_grad","get_hessian","get_prev_hessian","get_jacobian","get_prev_jacobian","get_iter","get_max_iters","get_population","increment_iter","increment_func_counts","set_func_counts","increment_cost_func_count","increment_grad_func_count","increment_hessian_func_count","increment_jacobian_func_count","increment_modify_func_count","new_best","is_best","terminated","new","push","merge","new","new","new","serializer","term","term_noblock","file","file_noblock","new","delay","surface","new","observe_init","observe_iter","new","push","is_empty","new","new_from_wrapper","apply","gradient","hessian","jacobian","modify","take_op","consume_op","consume_func_counts","reset","get_op","new","operator","state","new","set_dir","dir","set_name","name","set_mode","store","store_cond","terminated","text","new","msg","context","chain","root_cause","is","downcast","downcast_ref","downcast_mut"],"q":["argmin","argmin::core","","argmin::core::executor","","","","","","","","","","","","","","","","","argmin::core","argmin::core::file","","","","argmin::core","argmin::core::slog_logger","","","argmin::core","argmin::core::visualizer","","argmin::core","","","argmin::core::ArgminError","argmin::core","argmin::core::ArgminError","argmin::core","argmin::core::ArgminError","argmin::core","argmin::core::ArgminError","argmin::core","argmin::core::ArgminError","argmin::core","argmin::core::ArgminError","argmin::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin","argmin::prelude","argmin::prelude::bounds","","","argmin::prelude","argmin::prelude::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::prelude","argmin::prelude::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::prelude","argmin::prelude::identities","","","","","","","","","","argmin::prelude","argmin::prelude::int","","","","","","","","","","","","","","","","","argmin::prelude","argmin::prelude::ops","argmin::prelude::ops::checked","","","","","","","","","","","","","","","","argmin::prelude::ops","argmin::prelude::ops::inv","","","argmin::prelude::ops","argmin::prelude::ops::mul_add","","","","","argmin::prelude::ops","argmin::prelude::ops::overflowing","","","","","","argmin::prelude::ops","argmin::prelude::ops::saturating","","","","","","","","","argmin::prelude::ops","argmin::prelude::ops::wrapping","","","","","","","","","","","","argmin::prelude","argmin::prelude::pow","","","","","argmin::prelude","argmin::prelude::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::prelude","argmin::prelude::sign","","","","","","","","","","argmin::preludeargmin","argmin::solver","argmin::solver::brent","","","","argmin::solver","argmin::solver::conjugategradient","argmin::solver::conjugategradient::cg","","","","","argmin::solver::conjugategradient","argmin::solver::conjugategradient::nonlinear_cg","","","","argmin::solver::conjugategradient","argmin::solver::conjugategradient::beta","","","","","","","","argmin::solver","argmin::solver::gaussnewton","argmin::solver::gaussnewton::gaussnewton_linesearch","","","argmin::solver::gaussnewton","argmin::solver::gaussnewton::gaussnewton_method","","","","argmin::solver","argmin::solver::goldensectionsearch","","","argmin::solver","argmin::solver::gradientdescent","argmin::solver::gradientdescent::steepestdescent","","argmin::solver","argmin::solver::landweber","","argmin::solver","argmin::solver::linesearch","argmin::solver::linesearch::backtracking","","","argmin::solver::linesearch","argmin::solver::linesearch::condition","","","","","","","","","","","argmin::solver::linesearch","argmin::solver::linesearch::hagerzhang","","","","","","","","","argmin::solver::linesearch","argmin::solver::linesearch::morethuente","","","","argmin::solver","argmin::solver::neldermead","","","","","","","","argmin::solver","argmin::solver::newton","argmin::solver::newton::newton_cg","","","","argmin::solver::newton","argmin::solver::newton::newton_method","","","argmin::solver","argmin::solver::particleswarm","","","","","","argmin::solver","argmin::solver::quasinewton","argmin::solver::quasinewton::bfgs","","","","argmin::solver::quasinewton","argmin::solver::quasinewton::dfp","","","argmin::solver::quasinewton","argmin::solver::quasinewton::lbfgs","","","","argmin::solver::quasinewton","argmin::solver::quasinewton::sr1","","","","","argmin::solver::quasinewton","argmin::solver::quasinewton::sr1_trustregion","","","","","","","argmin::solver","argmin::solver::simulatedannealing","","","","","","","","","","","","argmin::solver","argmin::solver::trustregion","argmin::solver::trustregion::cauchypoint","","argmin::solver::trustregion","argmin::solver::trustregion::dogleg","","argmin::solver::trustregion","argmin::solver::trustregion::steihaug","","","","argmin::solver::trustregion","argmin::solver::trustregion::trustregion_method","","","","","argmin::solver::trustregion","argmin","","","argmin::core","","","","","","","","","","","","","argmin::core::executor","","","","","","","","","","","","","","argmin::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::core::file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::core::slog_logger","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::core::visualizer","","","","","","","","","","","","","","","","","","","","","","","","argmin::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::prelude","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::brent","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::conjugategradient::cg","","","","","","","","","","","","","","argmin::solver::conjugategradient::nonlinear_cg","","","","","","","","","","","","","","argmin::solver::conjugategradient::beta","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::gaussnewton::gaussnewton_linesearch","","","","","","","","","","","","","","argmin::solver::gaussnewton::gaussnewton_method","","","","","","","","","","","","","","argmin::solver::goldensectionsearch","","","","","","","","","","","","","","argmin::solver::gradientdescent::steepestdescent","","","","","","","","","","","","","","argmin::solver::landweber","","","","","","","","","","","","","","argmin::solver::linesearch::backtracking","","","","","","","","","","","","","","argmin::solver::linesearch::condition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::linesearch::hagerzhang","","","","","","","","","","","","","","argmin::solver::linesearch::morethuente","","","","","","","","","","","","","","argmin::solver::neldermead","","","","","","","","","","","","","","argmin::solver::newton::newton_cg","","","","","","","","","","","","","","argmin::solver::newton::newton_method","","","","","","","","","","","","","","argmin::solver::particleswarm","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::quasinewton::bfgs","","","","","","","","","","","","","","argmin::solver::quasinewton::dfp","","","","","","","","","","","","","","argmin::solver::quasinewton::lbfgs","","","","","","","","","","","","","","argmin::solver::quasinewton::sr1","","","","","","","","","","","","","","argmin::solver::quasinewton::sr1_trustregion","","","","","","","","","","","","","","argmin::solver::simulatedannealing","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::solver::trustregion::cauchypoint","","","","","","","","","","","","","","","argmin::solver::trustregion::dogleg","","","","","","","","","","","","","","","argmin::solver::trustregion::steihaug","","","","","","","","","","","","","","","argmin::solver::trustregion::trustregion_method","","","","","","","","","","","","","","argmin::prelude","","","argmin::core","","","","","","","","argmin::core::file","argmin::core::slog_logger","","argmin::core::visualizer","argmin::core","","","","","","","","","","","","","","","argmin::solver::brent","","argmin::solver::conjugategradient::cg","","argmin::solver::conjugategradient::nonlinear_cg","","argmin::solver::gaussnewton::gaussnewton_linesearch","","argmin::solver::gaussnewton::gaussnewton_method","","argmin::solver::goldensectionsearch","","argmin::solver::gradientdescent::steepestdescent","argmin::solver::landweber","argmin::solver::linesearch::backtracking","","","argmin::solver::linesearch::hagerzhang","","","argmin::solver::linesearch::morethuente","","argmin::solver::neldermead","","","argmin::solver::newton::newton_cg","","argmin::solver::newton::newton_method","argmin::solver::particleswarm","","argmin::solver::quasinewton::bfgs","","","argmin::solver::quasinewton::dfp","","","argmin::solver::quasinewton::lbfgs","","","argmin::solver::quasinewton::sr1","","","argmin::solver::quasinewton::sr1_trustregion","","","argmin::solver::simulatedannealing","","","argmin::solver::trustregion::cauchypoint","","argmin::solver::trustregion::dogleg","","argmin::solver::trustregion::steihaug","","","argmin::solver::trustregion::trustregion_method","","","argmin::solver::linesearch::backtracking","","argmin::solver::linesearch::hagerzhang","","argmin::solver::linesearch::morethuente","","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::solver::conjugategradient::beta","","","","argmin::solver::linesearch::condition","","","","","","","","argmin::core::slog_logger","argmin::core","argmin::core::executor","argmin::core","","","","argmin::core::file","","argmin::core::slog_logger","argmin::core","","","","","","","","argmin::solver::brent","argmin::solver::conjugategradient::cg","argmin::solver::conjugategradient::nonlinear_cg","argmin::solver::conjugategradient::beta","","","","argmin::solver::gaussnewton::gaussnewton_linesearch","argmin::solver::gaussnewton::gaussnewton_method","argmin::solver::goldensectionsearch","argmin::solver::gradientdescent::steepestdescent","argmin::solver::landweber","argmin::solver::linesearch::backtracking","argmin::solver::linesearch::condition","","","","argmin::solver::linesearch::hagerzhang","argmin::solver::linesearch::morethuente","argmin::solver::neldermead","argmin::solver::newton::newton_cg","argmin::solver::newton::newton_method","argmin::solver::particleswarm","argmin::solver::quasinewton::bfgs","argmin::solver::quasinewton::dfp","argmin::solver::quasinewton::lbfgs","argmin::solver::quasinewton::sr1","argmin::solver::quasinewton::sr1_trustregion","argmin::solver::simulatedannealing","","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::solver::trustregion::trustregion_method","argmin::core","","","","argmin::core::file","argmin::core","","","","","","","argmin::solver::conjugategradient::beta","","","","argmin::solver::gaussnewton::gaussnewton_method","argmin::solver::linesearch::condition","","","","argmin::solver::linesearch::hagerzhang","argmin::solver::linesearch::morethuente","argmin::solver::neldermead","argmin::solver::newton::newton_method","argmin::solver::simulatedannealing","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::core","","","argmin::core::file","","argmin::core","","","","","argmin::solver::conjugategradient::beta","","","","argmin::core","","","","","argmin::core::file","","","argmin::core","","","","","","","","argmin::solver::conjugategradient::beta","","","","argmin::solver::trustregion::cauchypoint","","argmin::solver::trustregion::dogleg","","argmin::solver::trustregion::steihaug","","argmin::core","","","argmin::core::file","","argmin::core","","","","","argmin::solver::conjugategradient::beta","","","","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::core","","","","","argmin::core::file","","argmin::core","","","","","","argmin::solver::brent","argmin::solver::conjugategradient::beta","","","","argmin::solver::linesearch::condition","","","","argmin::solver::particleswarm","argmin::solver::simulatedannealing","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::core","","","","","","","argmin::solver::brent","argmin::core","","","","","","argmin::solver::conjugategradient::beta","","","","argmin::core","argmin::core::executor","argmin::core","","","","argmin::core::file","","argmin::core","","","","","argmin::solver::brent","argmin::solver::conjugategradient::cg","argmin::solver::conjugategradient::nonlinear_cg","argmin::solver::conjugategradient::beta","","","","argmin::solver::gaussnewton::gaussnewton_linesearch","argmin::solver::gaussnewton::gaussnewton_method","argmin::solver::goldensectionsearch","argmin::solver::gradientdescent::steepestdescent","argmin::solver::landweber","argmin::solver::linesearch::backtracking","argmin::solver::linesearch::condition","","","","argmin::solver::linesearch::hagerzhang","argmin::solver::linesearch::morethuente","argmin::solver::neldermead","argmin::solver::newton::newton_cg","argmin::solver::newton::newton_method","argmin::solver::particleswarm","","argmin::solver::quasinewton::bfgs","argmin::solver::quasinewton::dfp","argmin::solver::quasinewton::lbfgs","argmin::solver::quasinewton::sr1","argmin::solver::quasinewton::sr1_trustregion","argmin::solver::simulatedannealing","","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::solver::trustregion::trustregion_method","argmin::core::executor","argmin::core","","","","argmin::core::file","","argmin::core","","","","","argmin::solver::brent","argmin::solver::conjugategradient::cg","argmin::solver::conjugategradient::nonlinear_cg","argmin::solver::conjugategradient::beta","","","","argmin::solver::gaussnewton::gaussnewton_linesearch","argmin::solver::gaussnewton::gaussnewton_method","argmin::solver::goldensectionsearch","argmin::solver::gradientdescent::steepestdescent","argmin::solver::landweber","argmin::solver::linesearch::backtracking","argmin::solver::linesearch::condition","","","","argmin::solver::linesearch::hagerzhang","argmin::solver::linesearch::morethuente","argmin::solver::neldermead","argmin::solver::newton::newton_cg","argmin::solver::newton::newton_method","argmin::solver::particleswarm","","argmin::solver::quasinewton::bfgs","argmin::solver::quasinewton::dfp","argmin::solver::quasinewton::lbfgs","argmin::solver::quasinewton::sr1","argmin::solver::quasinewton::sr1_trustregion","argmin::solver::simulatedannealing","","argmin::solver::trustregion::cauchypoint","argmin::solver::trustregion::dogleg","argmin::solver::trustregion::steihaug","argmin::solver::trustregion::trustregion_method","argmin::core::slog_logger","argmin::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin::core::file","","argmin::core::slog_logger","","","","argmin::core::visualizer","","","","argmin::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Core functionality Argmin Optimizaton toolbox core","Macros","Executor","Executes a solver","operator","Create a new executor with a <code>solver</code> and an initial …","Create a new executor from a checkpoint","Run the executor","Attaches a observer which implements <code>ArgminLog</code> to the …","Set maximum number of iterations","Set target cost value","Set cost value","Set Gradient","Set Hessian","Set Jacobian","Set checkpoint directory","Set checkpoint name","Set the checkpoint mode","Turn Ctrl-C handling on or off (default: on)","Turn timer on or off (default: on)","Output parameter vectors to file","Different kinds of serializers","Bincode","JSON","Write parameter vectors to file","Loggers based on the <code>slog</code> crate","A logger based on <code>slog</code>","This type is necessary in order to be able to implement …","Key value store","Observer which visualizes the progress of the solver","Visualize iterations of a solver for cost functions of …","Helper class for visualized surface","The <code>Error</code> type, a wrapper around a dynamic error type.","Argmin error type","Indicates and invalid parameter","Text","Indicates that a function is not implemented","Text","Indicates that a function is not initialized","Text","Indicates that a condition is violated","Text","Checkpoint was not found","Text","Indicates an impossible error","Text","Maintains the state from iteration to iteration of a …","Current parameter vector","Previous parameter vector","Current best parameter vector","Previous best parameter vector","Current cost function value","Previous cost function value","Current best cost function value","Previous best cost function value","Target cost function value","Current gradient","Previous gradient","Current Hessian","Previous Hessian","Current Jacobian","Previous Jacobian","All members for population-based algorithms as (param, …","Current iteration","Iteration number of last best cost","Maximum number of iterations","Number of cost function evaluations so far","Number of gradient evaluations so far","Number of Hessian evaluations so far","Number of Jacobian evaluations so far","Number of modify evaluations so far","Time required so far","Reason of termination","A simple key-value storage","The actual key value storage","Dot/scalar product of <code>T</code> and <code>self</code>","Dot/scalar product of <code>T</code> and <code>self</code>","Dot/scalar product of <code>T</code> and <code>self</code> weighted by W (p^TWv)","Dot/scalar product of <code>T</code> and <code>self</code>","Return param vector of all zeros (for now, this is a …","Return zero(s)","Return the conjugate","Return conjugate","Zero for dynamically sized objects","Return zero(s)","Identity matrix","Identity matrix of size <code>n</code>","Identity matrix of same size as <code>self</code>","Add a <code>T</code> to <code>self</code>","Add a <code>T</code> to <code>self</code>","Subtract a <code>T</code> from <code>self</code>","Subtract a <code>T</code> from <code>self</code>","(Pointwise) Multiply a <code>T</code> with <code>self</code>","(Pointwise) Multiply a <code>T</code> with <code>self</code>","(Pointwise) Divide a <code>T</code> by <code>self</code>","(Pointwise) Divide a <code>T</code> by <code>self</code>","Add a <code>T</code> scaled by an <code>U</code> to <code>self</code>","Add a <code>T</code> scaled by an <code>U</code> to <code>self</code>","Subtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>","Subtract a <code>T</code> scaled by an <code>U</code> from <code>self</code>","Compute the l2-norm (<code>U</code>) of <code>self</code>","Compute the l2-norm (<code>U</code>) of <code>self</code>","Return the transpose (<code>U</code>) of <code>self</code>","Transpose","Compute the inverse (<code>T</code>) of <code>self</code>","Compute the inverse","Create a random number","Get a random element between min and max,","Minimum and Maximum of type <code>T</code>","Select piecewise minimum","Select piecewise maximum","Fake Operators for testing No-op operator with free …","Minimal No-op operator which does nothing, really.","Different kinds of serializers","Bincode","JSON","Write parameter vectors to file","A logger based on <code>slog</code>","This type is necessary in order to be able to implement …","Key value store","Visualize iterations of a solver for cost functions of …","Helper class for visualized surface","Defines the interface every Observer needs to expose","Called once at the beginning of the execution of the …","Called at every iteration of the solver","Container for observers which acts just like a single …","This is used to indicate how often the observer will …","Never call the observer","Call observer in every iteration","Call observer every N iterations","Call observer when new best is found","This wraps an operator and keeps track of how often the …","Operator","Number of cost function evaluations","Number of gradient function evaluations","Number of Hessian function evaluations","Number of Jacobian function evaluations","Number of <code>modify</code> function evaluations","Final struct returned by the <code>run</code> method of <code>Executor</code>.","operator","iteration state","Defines at which intervals a checkpoint is saved.","Never create checkpoint","Create checkpoint every N iterations","Create checkpoint in every iteration","Checkpoint","Load a checkpoint from disk","Indicates why the optimization algorithm stopped","In case it has not terminated yet","Maximum number of iterations reached","Target cost function value reached","Target precision reached","Cost function value did not change","Acceped stall iter exceeded","Best stall iter exceeded","Condition for Line search met","Target tolerance reached","Aborted","Trait alias to simplify common trait bounds","This trait needs to be implemented for every …","Type of the parameter vector","Output of the operator","Type of Hessian","Type of Jacobian","Precision of floats","Applies the operator/cost function to parameters","Computes the gradient at the given parameters","Computes the Hessian at the given parameters","Computes the Hessian at the given parameters","Modifies a parameter vector. Comes with a variable that …","Solver","Name of the solver","Computes one iteration of the algorithm.","Initializes the algorithm","Checks whether basic termination reasons apply.","Checks whether the algorithm must be terminated","The datastructure which is returned by the <code>next_iter</code> …","Constructor","Set parameter vector","Set cost function value","Set gradient","Set Hessian","Set Jacobian","Set Population","Adds an <code>ArgminKV</code>","Set termination reason","Get parameter vector","Get cost function value","Get gradient","Get Hessian","Get Jacobian","Get reference to population","Get termination reason","Return KV","Defines a common interface for line search methods.","Set the search direction","Set the initial step length","Defines a common interface to methods which calculate …","Set the initial step length","Common interface for beta update methods (Nonlinear-CG)","Update beta Parameter 1: \\\\nabla f_k Parameter 2: \\\\nabla f_…","Definition of all relevant traits and types","","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","","A generic trait for converting a value to a number.","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","A generic trait for converting a number to a value.","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts a <code>usize</code> to return an optional value of this …","Converts an <code>u8</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u128</code> to return an optional value of this …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Cast from one machine scalar to another.","An interface for casting between machine scalars.","Creates a number from another value that can be converted …","A generic interface for casting between machine scalars …","Convert a value to another, using the <code>as</code> operator.","","Generic trait for floating point numbers that works with …","Returns positive infinity.","Returns negative infinity.","Returns NaN.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns the minimum of the two numbers.","Returns the maximum of the two numbers.","Returns the reciprocal (multiplicative inverse) of the …","Raise a number to an integer power.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Returns the mantissa, base 2 exponent, and sign as …","Generic trait for floating point numbers","Returns the <code>NaN</code> value.","Returns the infinite value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a floating point power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Returns the mantissa, base 2 exponent, and sign as …","","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Return <code>log10(2.0)</code>.","Return <code>log2(10.0)</code>.","","Defines an additive identity element for <code>Self</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Defines a multiplicative identity element for <code>Self</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns the additive identity, <code>0</code>.","Returns the multiplicative identity, <code>1</code>.","","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of leading zeros in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","Performs addition that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Performs subtraction that returns <code>None</code> instead of …","Subtracts two numbers, checking for underflow. If …","Performs multiplication that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Performs division that returns <code>None</code> instead of panicking …","Divides two numbers, checking for underflow, overflow and …","Performs an integral remainder that returns <code>None</code> instead …","Finds the remainder of dividing two numbers, checking for …","Performs negation that returns <code>None</code> if the result can’t …","Negates a number, returning <code>None</code> for results that can’t …","Performs a left shift that returns <code>None</code> on shifts larger …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Performs a right shift that returns <code>None</code> on shifts larger …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","The fused multiply-add assignment operation.","Performs the fused multiply-add operation.","","Performs addition with a flag for overflow.","Returns a tuple of the sum along with a boolean …","Performs substraction with a flag for overflow.","Returns a tuple of the difference along with a boolean …","Performs multiplication with a flag for overflow.","Returns a tuple of the product along with a boolean …","","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Performs addition that saturates at the numeric bounds …","Saturating addition. Computes <code>self + other</code>, saturating at …","Performs subtraction that saturates at the numeric bounds …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs multiplication that saturates at the numeric …","Saturating multiplication. Computes <code>self * other</code>, …","","Performs addition that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Performs subtraction that wraps around on overflow.","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Performs multiplication that wraps around on overflow.","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Performs a negation that does not panic.","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Performs a left shift that does not panic.","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Performs a right shift that does not panic.","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","","Binary operator for raising a value to a power.","The result after applying the operator.","Returns <code>self</code> to the power <code>rhs</code>.","Raises a value to the power of exp, using exponentiation …","Raises a value to the power of exp, returning <code>None</code> if an …","","A trait for real number types that do not necessarily have…","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a real number power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","","Useful functions for signed numbers (i.e. numbers that …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","Returns true if the number is positive and false if the …","Returns true if the number is negative and false if the …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","A trait for values which cannot be negative","The base trait for numeric types, covering <code>0</code> and <code>1</code> values,…","","Convert from a string and radix (typically <code>2..=36</code>).","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","The trait for references which implement numeric …","The trait for types implementing numeric assignment …","The trait for <code>Num</code> types which also implement assignment …","The trait for <code>NumAssign</code> types which also implement …","","","","","","A value bounded by a minimum and a maximum","A value bounded by a minimum value","A value bounded by a maximum value","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","Generic trait for floating point numbers","Returns the <code>NaN</code> value.","Returns the infinite value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the smallest finite value that this type can …","Returns the smallest positive, normalized value that this …","Returns epsilon, a small positive value.","Returns the largest finite value that this type can …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the floating point category of the number. If …","Returns the largest integer less than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the nearest integer to a number. Round half-way …","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Returns a number that represents the sign of <code>self</code>.","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Raise a number to an integer power.","Raise a number to a floating point power.","Take the square root of a number.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 2 logarithm of the number.","Returns the base 10 logarithm of the number.","Converts radians to degrees.","Converts degrees to radians.","Returns the maximum of the two numbers.","Returns the minimum of the two numbers.","The positive difference of two numbers.","Take the cubic root of a number.","Calculate the length of the hypotenuse of a right-angle …","Computes the sine of a number (in radians).","Computes the cosine of a number (in radians).","Computes the tangent of a number (in radians).","Computes the arcsine of a number. Return value is in …","Computes the arccosine of a number. Return value is in …","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and …","Simultaneously computes the sine and cosine of the …","Returns <code>e^(self) - 1</code> in a way that is accurate even if the…","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than …","Hyperbolic sine function.","Hyperbolic cosine function.","Hyperbolic tangent function.","Inverse hyperbolic sine function.","Inverse hyperbolic cosine function.","Inverse hyperbolic tangent function.","Returns the mantissa, base 2 exponent, and sign as …","","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Return <code>log10(2.0)</code>.","Return <code>log2(10.0)</code>.","Cast from one machine scalar to another.","A generic interface for casting between machine scalars …","Convert a value to another, using the <code>as</code> operator.","A generic trait for converting a number to a value.","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this …","Converts a <code>usize</code> to return an optional value of this …","Converts an <code>u8</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u128</code> to return an optional value of this …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","An interface for casting between machine scalars.","Creates a number from another value that can be converted …","A generic trait for converting a value to a number.","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i128</code>. If the value …","Converts the value of <code>self</code> to a <code>usize</code>. If the value …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be…","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map …","Returns the multiplicative identity, <code>1</code>.","Returns the additive identity, <code>0</code>.","Defines a multiplicative identity element for <code>Self</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Defines an additive identity element for <code>Self</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Generic trait for primitive integers.","Returns the number of ones in the binary representation …","Returns the number of zeros in the binary representation …","Returns the number of leading zeros in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Raises self to the power of <code>exp</code>, using exponentiation by …","Performs addition that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Performs division that returns <code>None</code> instead of panicking …","Divides two numbers, checking for underflow, overflow and …","Performs multiplication that returns <code>None</code> instead of …","Multiplies two numbers, checking for underflow or …","Performs negation that returns <code>None</code> if the result can’t …","Negates a number, returning <code>None</code> for results that can’t …","Performs an integral remainder that returns <code>None</code> instead …","Finds the remainder of dividing two numbers, checking for …","Performs a left shift that returns <code>None</code> on shifts larger …","Checked shift left. Computes <code>self << rhs</code>, returning <code>None</code> …","Performs a right shift that returns <code>None</code> on shifts larger …","Checked shift right. Computes <code>self >> rhs</code>, returning <code>None</code> …","Performs subtraction that returns <code>None</code> instead of …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","The fused multiply-add assignment operation.","Performs the fused multiply-add operation.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>…","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Performs addition that saturates at the numeric bounds …","Saturating addition. Computes <code>self + other</code>, saturating at …","Performs multiplication that saturates at the numeric …","Saturating multiplication. Computes <code>self * other</code>, …","Performs subtraction that saturates at the numeric bounds …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Performs multiplication that wraps around on overflow.","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Performs a negation that does not panic.","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Performs a left shift that does not panic.","Panic-free bitwise shift-left; yields <code>self << mask(rhs)</code>, …","Performs a right shift that does not panic.","Panic-free bitwise shift-right; yields <code>self >> mask(rhs)</code>, …","Performs subtraction that wraps around on overflow.","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Binary operator for raising a value to a power.","The result after applying the operator.","Returns <code>self</code> to the power <code>rhs</code>.","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","Useful functions for signed numbers (i.e. numbers that …","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","Returns true if the number is positive and false if the …","Returns true if the number is negative and false if the …","A trait for values which cannot be negative","Solvers","Brent’s method","Error to be thrown if Brent is initialized with improper …","f(min) and f(max) must have different signs","Brent’s method","Constructor The values <code>min</code> and <code>max</code> must bracketing the …","Conjugate Gradient methods","Conjugate gradient method","The conjugate gradient method is a solver for systems of …","Constructor","Return the current search direction (This is needed by …","Return the previous search direction (This is needed by …","Return the current residual (This is needed by NewtonCG …","Nonlinear conjugate gradient method Important TODO: Find …","The nonlinear conjugate gradient is a generalization of …","Constructor (Polak Ribiere Conjugate Gradient (PR-CG))","Specifiy the number of iterations after which a restart …","Set the value for the orthogonality measure. Setting this …","Beta update methods for nonlinear CG","Fletcher and Reeves (FR) method TODO: Reference","Constructor","Polak and Ribiere (PR) method TODO: Reference","Constructor","Polak and Ribiere Plus (PR+) method TODO: Reference","Constructor","Hestenes and Stiefel (HS) method TODO: Reference","Constructor","Newton Methods","Gauss-Newton method with linesearch","Gauss-Newton method with linesearch","Constructor","Set tolerance for the stopping criterion based on cost …","Gauss-Newton method","Gauss-Newton method","Constructor","set gamma","Set tolerance for the stopping criterion based on cost …","References:","Golden-section search","Constructor","Set tolerance","Gradient descent methods","Steepest Descent method","Steepest descent iteratively takes steps in the direction …","Constructor","Landweber iteration","The Landweber iteration is a solver for ill-posed linear …","Constructor","Line search methods","Backtracking line search algorithm","The Backtracking line search is a simple method to find a …","Constructor","Set rho","Acceptance conditions","Needs to be implemented by everything that wants to be a …","Evaluate the condition","Indicates whether this condition requires the computation …","Armijo Condition","Constructor","Wolfe Condition","Constructor","Strong Wolfe conditions","Constructor","Goldstein conditions","Constructor","Hager-Zhang line search algorithm","The Hager-Zhang line search is a method to find a step …","Constructor","set delta","set sigma","set epsilon","set theta","set gamma","set eta","set alpha limits","More-Thuente line search algorithm","The More-Thuente line search is a method to find a step …","Constructor","Set c1 and c2 where 0 < c1 < c2 < 1.","set alpha limits","References:","Nelder-Mead method","Constructor","Add initial parameters","Set Sample standard deviation tolerance","set alpha","set gamma","set rho","set sigma","Newton Methods","Newton-CG method TODO: Stop when search direction is …","The Newton-CG method (also called truncated Newton …","Constructor","Set curvature threshold","Set tolerance for the stopping criterion based on cost …","Newton’s method","Newton’s method iteratively finds the stationary points …","Constructor","set gamma","References:","Particle Swarm Optimization (PSO)","Constructor","Position","A single particle","Position of particle","Cost of particle","Quasi-Newton methods","References:","BFGS method","Constructor","Sets tolerance for the stopping criterion based on the …","Sets tolerance for the stopping criterion based on the …","References:","DFP method","Constructor","Sets tolerance for the stopping criterion based on the …","References:","L-BFGS method","Constructor","Sets tolerance for the stopping criterion based on the …","Sets tolerance for the stopping criterion based on the …","References:","SR1 method (broken!)","Constructor","Set r","Sets tolerance for the stopping criterion based on the …","Sets tolerance for the stopping criterion based on the …","References:","SR1 Trust Region method","Constructor","provide initial Hessian (if not provided, the algorithm …","Set r","set radius","Set eta","Sets tolerance for the stopping criterion based on the …","Simulated AnnealingReferences","Temperature functions for Simulated Annealing.","<code>t_i = t_init / i</code>","<code>t_i = t_init / ln(i)</code>","<code>t_i = t_init * x^i</code>","Simulated Annealing","Constructor","Set temperature function to one of the options in …","The optimization stops after there has been no accepted …","The optimization stops after there has been no new best …","Start reannealing after <code>iter</code> iterations","Start reannealing after no accepted solution has been …","Start reannealing after no new best solution has been …","Argmin Trust region methods","Cauchy Point","The Cauchy point is the minimum of the quadratic …","Constructor","Dogleg method","The Dogleg method computes the intersection of the trust …","Constructor","Steihaug method","The Steihaug method is a conjugate gradients based …","Constructor","Set epsilon","set maximum number of iterations","Trust region solver","The trust region method approximates the cost function …","Constructor","set radius","Set maximum radius","Set eta","Computes reduction ratio","Creates an <code>ArgminKV</code> at compile time in order to avoid …","Release an <code>T</code> from an <code>Option<T></code> if it is not <code>None</code>. If it …","Reuse a list of trait bounds by giving it a name, e.g. …og general info","This should be used to log iteration data only (because …","","Initial observation This is called after the …","This is called after every iteration and gets the current …","Do nothing, really.","Do nothing, really.","Do nothing, really.","Do nothing, really.","Do nothing, really.","Do nothing, really.","Do nothing, really.","Do nothing, really.","","","","","","","","","Perform one iteration of CG algorithm","","","","","","","","","","","","","","","","","","","","","","","","","","Perform one iteration of algorithm","","","","","","","","","","","","","","","","","Perform one iteration of SA algorithm","","","","","","","","","","","","Set search direction","Set initial alpha value","Set search direction","Set initial alpha value","Set search direction","Set initial alpha value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The default is <code>Always</codereate new IterState from <code>param</code>","Set parameter vector. This shifts the stored parameter …","Set best paramater vector. This shifts the stored best …","Set the current cost function value. This shifts the …","Set the current best cost function value. This shifts the …","Set gradient. This shifts the stored gradient to the …","Set Hessian. This shifts the stored Hessian to the …","Set Jacobian. This shifts the stored Jacobian to the …","Set population","Set target cost value","Set maximum number of iterations","Set iteration number where the previous best parameter …","Set termination_reason","Set time required so far","Returns current parameter vector","Returns previous parameter vector","Returns best parameter vector","Returns previous best parameter vector","Returns current cost function value","Returns previous cost function value","Returns current best cost function value","Returns previous best cost function value","Returns target cost","Returns current cost function evaluation count","Returns current gradient function evaluation count","Returns current Hessian function evaluation count","Returns current Jacobian function evaluation count","Returns current Modify function evaluation count","Returns iteration number where the last best parameter …","Get termination_reason","Get time required so far","Returns gradient","Returns previous gradient","Returns current Hessian","Returns previous Hessian","Returns current Jacobian","Returns previous Jacobian","Returns current number of iterations","Returns maximum number of iterations","Returns population","Increment the number of iterations by one","Increment all function evaluation counts by the …","Set all function evaluation counts to the evaluation …","Increment cost function evaluation count by <code>num</code>","Increment gradient function evaluation count by <code>num</code>","Increment Hessian function evaluation count by <code>num</code>","Increment Jacobian function evaluation count by <code>num</code>","Increment modify function evaluation count by <code>num</code>","Indicate that a new best parameter vector was found","Returns whether the current parameter vector is also the …","Return whether the algorithm has terminated or not","Constructor","Push a key-value pair to the <code>kv</code> vector.","Merge another <code>kv</code> into <code>self.kv</code>","Constructor","Constructor","Create a new <code>WriteToFile</code> struct","Set serializer","Log to the terminal in a blocking way","Log to the terminal in a non-blocking way (in case of …","Log JSON to a file in a blocking way","Log JSON to a file in a non-blocking way (in case of …","Create a new visualizer","Set delay","Set surface","Create a new surface","Called once at the beginning of the execution of the …","Called at every iteration of the solver","Constructor","Push another <code>Observe</code> to the <code>observer</code> field","Returns true if <code>observers</code> is empty","Constructor","Construct struct from other <code>OpWrapper</code>. Takes the operator …","Calls the <code>apply</code> method of <code>op</code> and increments …","Calls the <code>gradient</code> method of <code>op</code> and increments …","Calls the <code>hessian</code> method of <code>op</code> and increments …","Calls the <code>jacobian</code> method of <code>op</code> and increments …","Calls the <code>modify</code> method of <code>op</code> and increments …","Moves the operator out of the struct and replaces it with …","Consumes an operator by increasing the function call …","Adds function evaluation counts of another operator.","Reset the cost function counts to zero.","Returns the operator <code>op</code> by taking ownership of <code>self</code>.","Constructor","Return handle to operator","Return handle to state","Define a new checkpoint","Set directory of checkpoint","Get directory of checkpoint","Set name of checkpoint","Get name of checkpoint","Set mode of checkpoint","Write checkpoint to disk","Write checkpoint based on the desired <code>CheckpointMode</code>","Returns <code>true</code> if a solver terminated and <code>false</code> otherwise","Returns a texual representation of what happened","Create a new error object from any error type.","Create a new error object from a printable error message.","Wrap the error value with additional context.","An iterator of the chain of source errors contained by …","The lowest level cause of this error — this error’s …","Returns true if <code>E</code> is the type held by this error object.","Attempt to downcast the error object to a concrete type.","Downcast this error object by reference.","Downcast this error object by mutable reference."],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,2,2,0,0,0,0,3,0,0,0,0,0,4,5,4,6,4,7,4,8,4,9,4,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,29,0,0,0,2,2,0,0,0,3,0,0,0,30,30,0,0,31,31,31,31,0,32,32,32,32,32,32,0,33,33,0,34,34,34,0,0,0,35,35,35,35,35,35,35,35,35,35,0,0,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,39,39,0,40,0,41,0,0,0,42,42,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,45,0,46,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,50,50,50,0,51,51,51,0,0,0,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,0,61,61,0,0,62,62,0,63,0,0,64,0,65,0,66,0,0,67,67,0,68,0,69,0,70,0,0,71,0,72,0,73,0,74,0,75,0,76,0,0,77,77,0,0,0,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,79,79,79,79,79,0,0,0,0,0,80,80,0,0,0,0,0,0,0,81,81,0,82,0,0,0,0,42,42,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,0,46,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,45,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,51,51,51,0,50,50,50,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,53,0,56,0,55,0,58,0,57,0,59,0,60,0,54,0,61,61,0,62,62,0,63,0,67,67,0,68,0,70,0,69,0,71,0,73,0,74,0,75,0,76,0,72,0,0,0,77,77,0,0,0,0,79,79,79,79,79,0,0,0,0,83,0,84,0,0,0,85,85,85,85,0,0,86,86,86,0,0,87,0,88,0,89,0,90,0,0,0,91,91,0,0,92,92,92,0,0,93,93,0,0,0,94,0,0,95,0,0,0,96,96,0,0,97,97,0,98,0,99,0,100,0,101,0,0,102,102,102,102,102,102,102,102,0,0,103,103,103,0,0,104,104,104,104,104,104,104,0,0,0,105,105,105,0,0,106,106,0,0,107,0,0,108,108,0,0,0,109,109,109,0,0,110,110,0,0,111,111,111,0,0,112,112,112,112,0,0,113,113,113,113,113,113,0,0,114,114,114,0,115,115,115,115,115,115,115,0,0,0,116,0,0,117,0,0,118,118,118,0,0,119,119,119,119,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,122,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,123,123,3,3,3,3,3,3,3,3,3,3,3,3,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,126,126,126,126,126,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,127,127,127,127,127,127,127,127,127,127,127,127,127,127,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,128,128,128,128,128,128,128,128,128,128,128,128,128,128,38,38,38,38,38,38,38,38,38,38,38,38,38,38,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,96,96,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,82,81,82,128,128,128,128,128,128,128,128,122,123,123,124,126,126,120,120,120,120,121,121,121,121,32,32,32,32,32,84,84,85,85,86,86,91,91,92,92,93,93,94,95,96,96,96,102,102,102,103,103,104,104,104,105,105,106,107,107,109,109,109,110,110,110,111,111,111,112,112,112,113,113,113,115,115,115,116,116,117,117,118,118,118,119,119,119,96,96,102,102,103,103,116,117,118,87,88,89,90,98,98,99,99,100,100,101,101,3,12,1,11,12,120,121,2,122,123,126,31,32,33,34,127,35,38,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,108,109,110,111,112,113,114,115,116,117,118,119,11,12,120,121,2,126,31,32,34,127,35,38,87,88,89,90,92,98,99,100,101,102,103,104,106,114,116,117,118,12,120,121,2,122,31,33,34,127,35,87,88,89,90,12,12,120,120,121,2,122,122,31,31,33,34,34,127,127,35,87,88,89,90,116,116,117,117,118,118,12,120,121,2,122,31,33,34,127,35,87,88,89,90,116,117,118,4,11,12,120,121,2,122,31,32,34,127,35,38,83,87,88,89,90,98,99,100,101,108,114,116,117,118,4,12,120,121,33,34,35,83,12,120,121,34,127,35,87,88,89,90,12,1,11,12,120,121,2,122,31,32,34,127,35,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,1,11,12,120,121,2,122,31,32,34,127,35,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,120,121,122,122,123,123,123,123,124,124,124,125,30,30,126,126,126,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,127,127,127,127,127,127,127,127,35,35,128,128,128,128,128,128,128,128,128],"f":[null,null,null,null,null,[[]],[[["asref",8],["path",3]],[["result",4],["error",3]]],[[],[["argminresult",3],["error",3],["result",4]]],[[["observe",8],["observermode",4]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["str",15]]],[[["checkpointmode",4]]],[[["bool",15]]],[[["bool",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[["usize",15]]],[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[],[["result",4],["error",3]]],null,[[]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["argminkv",3],["str",15]],[["result",4],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["asref",8],["path",3]],[["result",4],["deserializeowned",8],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],[["result",4],["error",3]]],null,null,[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3]],["terminationreason",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[["argminkv",3]]],[[["terminationreason",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["vec",3]]],[[],[["terminationreason",4],["option",4]]],[[],["argminkv",3]],null,[[]],[[],[["result",4],["error",3]]],null,[[]],null,[[]],null,null,null,[[]],[[]],null,null,[[],[["option",4],["isize",15]]],[[],[["option",4],["i8",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u128",15]]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],null,[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[],["option",4]],null,[[],["option",4]],null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[],["bool",15]],null,[[]],[[]],[[],["bool",15]],[[]],[[]],null,null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],null,null,null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[["u32",15]],["option",4]],null,[[["u32",15]],["option",4]],null,null,null,[[]],null,null,null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,null,[[]],[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[["u32",15]]],null,[[["u32",15]]],null,null,null,[[]],[[["usize",15]]],[[["usize",15]],["option",4]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],null,null,null,[[["u32",15],["str",15]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],null,[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],null,[[]],null,[[["isize",15]],["option",4]],[[["i8",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i128",15]],["option",4]],[[["usize",15]],["option",4]],[[["u8",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u128",15]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],null,[[],["option",4]],null,[[],[["option",4],["isize",15]]],[[],[["option",4],["i8",15]]],[[],[["i16",15],["option",4]]],[[],[["i32",15],["option",4]]],[[],[["i64",15],["option",4]]],[[],[["option",4],["i128",15]]],[[],[["option",4],["usize",15]]],[[],[["option",4],["u8",15]]],[[],[["option",4],["u16",15]]],[[],[["option",4],["u32",15]]],[[],[["option",4],["u64",15]]],[[],[["option",4],["u128",15]]],[[],[["f32",15],["option",4]]],[[],[["f64",15],["option",4]]],[[]],[[]],null,[[]],[[]],[[],["bool",15]],null,[[]],[[]],[[],["bool",15]],null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[],["option",4]],null,[[["u32",15]],["option",4]],null,[[["u32",15]],["option",4]],null,[[],["option",4]],null,null,[[]],null,null,[[]],null,[[]],null,[[]],[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[["u32",15]]],null,[[["u32",15]]],null,[[]],[[["usize",15]],["option",4]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,null,null,null,null,null,[[],["brent",3]],null,null,null,[[],[["result",4],["error",3]]],[[]],[[]],[[]],null,null,[[],[["result",4],["error",3]]],[[["u64",15]]],[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,null,null,[[]],[[],[["result",4],["error",3]]],null,null,[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],null,null,[[]],[[]],null,null,null,[[]],null,null,[[]],null,null,null,[[]],[[],[["result",4],["error",3]]],null,null,[[],["bool",15]],[[],["bool",15]],null,[[],[["result",4],["error",3]]],null,[[],[["result",4],["error",3]]],null,[[],[["result",4],["error",3]]],null,[[],[["result",4],["error",3]]],null,null,[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],null,null,[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],null,null,[[]],[[["vec",3]]],[[]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],null,null,null,[[]],[[]],[[],[["result",4],["error",3]]],null,null,[[]],[[],[["result",4],["error",3]]],null,null,[[["usize",15]],[["result",4],["error",3]]],null,null,null,null,null,null,null,[[]],[[]],[[]],null,null,[[]],[[]],null,null,[[["usize",15]]],[[]],[[]],null,null,[[]],[[],[["result",4],["error",3]]],[[]],[[]],null,null,[[]],[[]],[[],[["result",4],["error",3]]],[[]],[[],[["result",4],["error",3]]],[[]],null,null,null,null,null,null,[[],[["result",4],["error",3]]],[[["satempfunc",4]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],null,null,null,[[]],null,null,[[]],null,null,[[]],[[],[["result",4],["error",3]]],[[["u64",15]]],null,null,[[]],[[]],[[]],[[],[["result",4],["error",3]]],[[["argminfloat",8]],["argminfloat",8]],null,null,null,[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["result",4],["error",3]]],[[],["error",8]],[[],["error",8]],[[]],[[],["error",3]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["formatter",3]],[["result",4],["error",3]]],[[]],[[["argminkv",3],["iterstate",3]],[["result",4],["error",3]]],[[["argminkv",3],["str",15]],[["result",4],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4],["error",3]]],[[["argminkv",3],["str",15]],[["result",4],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[["f64",15]],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],[["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[["iterstate",3],["opwrapper",3]],[["result",4],["option",4],["error",3]]],[[["iterstate",3],["opwrapper",3]],[["argminiterdata",3],["result",4],["error",3]]],[[["iterstate",3]],["terminationreason",4]],[[]],[[],[["result",4],["error",3]]],[[]],[[],[["result",4],["error",3]]],[[]],[[],[["result",4],["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["argminkv",3]],["argminslogkv",3]],[[["intoiterator",8]]],[[],["executor",3]],[[],["iterstate",3]],[[],["argminkv",3]],[[],["nooperator",3]],[[],["minimalnooperator",3]],[[],["writetofileserializer",4]],[[],["writetofile",3]],[[],["argminsloglogger",3]],[[],["observer",3]],[[],["observermode",4]],[[],["opwrapper",3]],[[],["argminresult",3]],[[],["checkpointmode",4]],[[],["argmincheckpoint",3]],[[],["terminationreason",4]],[[],["argminiterdata",3]],[[],["brent",3]],[[],["conjugategradient",3]],[[],["nonlinearconjugategradient",3]],[[],["fletcherreeves",3]],[[],["polakribiere",3]],[[],["polakribiereplus",3]],[[],["hestenesstiefel",3]],[[],["gaussnewtonls",3]],[[],["gaussnewton",3]],[[],["goldensectionsearch",3]],[[],["steepestdescent",3]],[[],["landweber",3]],[[],["backtrackinglinesearch",3]],[[],["armijocondition",3]],[[],["wolfecondition",3]],[[],["strongwolfecondition",3]],[[],["goldsteincondition",3]],[[],["hagerzhanglinesearch",3]],[[],["morethuentelinesearch",3]],[[],["neldermead",3]],[[],["newtoncg",3]],[[],["newton",3]],[[],["particle",3]],[[],["bfgs",3]],[[],["dfp",3]],[[],["lbfgs",3]],[[],["sr1",3]],[[],["sr1trustregion",3]],[[],["satempfunc",4]],[[],["simulatedannealing",3]],[[],["cauchypoint",3]],[[],["dogleg",3]],[[],["steihaug",3]],[[],["trustregion",3]],[[]],[[],["argminkv",3]],[[],["nooperator",3]],[[],["minimalnooperator",3]],[[]],[[],["observer",3]],[[],["observermode",4]],[[],["opwrapper",3]],[[],["checkpointmode",4]],[[],["argmincheckpoint",3]],[[]],[[],["argminiterdata",3]],[[],["fletcherreeves",3]],[[],["polakribiere",3]],[[],["polakribiereplus",3]],[[],["hestenesstiefel",3]],[[],["gaussnewton",3]],[[],["armijocondition",3]],[[],["wolfecondition",3]],[[],["strongwolfecondition",3]],[[],["goldsteincondition",3]],[[]],[[]],[[],["neldermead",3]],[[],["newton",3]],[[]],[[],["cauchypoint",3]],[[],["dogleg",3]],[[],["steihaug",3]],[[["argminkv",3]],["ordering",4]],[[["nooperator",3]],["ordering",4]],[[["minimalnooperator",3]],["ordering",4]],[[["writetofileserializer",4]],["ordering",4]],[[["writetofile",3]],["ordering",4]],[[["observermode",4]],["ordering",4]],[[["argminresult",3]],["ordering",4]],[[["checkpointmode",4]],["ordering",4]],[[["argmincheckpoint",3]],["ordering",4]],[[["terminationreason",4]],["ordering",4]],[[["fletcherreeves",3]],["ordering",4]],[[["polakribiere",3]],["ordering",4]],[[["polakribiereplus",3]],["ordering",4]],[[["hestenesstiefel",3]],["ordering",4]],[[["argminkv",3]],["bool",15]],[[["argminkv",3]],["bool",15]],[[["nooperator",3]],["bool",15]],[[["nooperator",3]],["bool",15]],[[["minimalnooperator",3]],["bool",15]],[[["writetofileserializer",4]],["bool",15]],[[["writetofile",3]],["bool",15]],[[["writetofile",3]],["bool",15]],[[["observermode",4]],["bool",15]],[[["observermode",4]],["bool",15]],[[["argminresult",3]],["bool",15]],[[["checkpointmode",4]],["bool",15]],[[["checkpointmode",4]],["bool",15]],[[["argmincheckpoint",3]],["bool",15]],[[["argmincheckpoint",3]],["bool",15]],[[["terminationreason",4]],["bool",15]],[[["fletcherreeves",3]],["bool",15]],[[["polakribiere",3]],["bool",15]],[[["polakribiereplus",3]],["bool",15]],[[["hestenesstiefel",3]],["bool",15]],[[["cauchypoint",3]],["bool",15]],[[["cauchypoint",3]],["bool",15]],[[["dogleg",3]],["bool",15]],[[["dogleg",3]],["bool",15]],[[["steihaug",3]],["bool",15]],[[["steihaug",3]],["bool",15]],[[["argminkv",3]],[["ordering",4],["option",4]]],[[["nooperator",3]],[["ordering",4],["option",4]]],[[["minimalnooperator",3]],[["ordering",4],["option",4]]],[[["writetofileserializer",4]],[["ordering",4],["option",4]]],[[["writetofile",3]],[["ordering",4],["option",4]]],[[["observermode",4]],[["ordering",4],["option",4]]],[[["argminresult",3]],[["option",4],["ordering",4]]],[[["checkpointmode",4]],[["ordering",4],["option",4]]],[[["argmincheckpoint",3]],[["ordering",4],["option",4]]],[[["terminationreason",4]],[["ordering",4],["option",4]]],[[["fletcherreeves",3]],[["ordering",4],["option",4]]],[[["polakribiere",3]],[["ordering",4],["option",4]]],[[["polakribiereplus",3]],[["ordering",4],["option",4]]],[[["hestenesstiefel",3]],[["ordering",4],["option",4]]],[[["cauchypoint",3]],[["ordering",4],["option",4]]],[[["dogleg",3]],[["ordering",4],["option",4]]],[[["steihaug",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["record",3],["serializer",8]],["result",6]],[[["record",3],["serializer",8]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[["u64",15]]],[[["u64",15]]],[[["terminationreason",4]]],[[["duration",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[],["terminationreason",4]],[[],[["duration",3],["option",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["u64",15]],[[],["u64",15]],[[],[["option",4],["vec",3]]],[[]],[[["opwrapper",3]]],[[["opwrapper",3]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["display",8],["str",15]]],[[["argminkv",3]]],[[]],[[]],[[["str",15]]],[[["writetofileserializer",4]]],[[]],[[]],[[["bool",15],["str",15]],[["result",4],["error",3]]],[[["bool",15],["str",15]],[["result",4],["error",3]]],[[]],[[["duration",3]]],[[["surface",3]]],[[["f64",15]]],[[["argminkv",3],["str",15]],[["result",4],["error",3]]],[[["argminkv",3],["iterstate",3]],[["result",4],["error",3]]],[[]],[[["observe",8],["observermode",4]]],[[],["bool",15]],[[]],[[["opwrapper",3]]],[[],[["error",3],["result",4]]],[[],[["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[],[["result",4],["error",3]]],[[],[["result",4],["error",3]]],[[],["option",4]],[[["opwrapper",3]]],[[["opwrapper",3],["argminop",8]]],[[]],[[]],[[["iterstate",3]]],[[]],[[],["iterstate",3]],[[["checkpointmode",4],["str",15]],[["result",4],["error",3]]],[[["str",15]]],[[],["string",3]],[[["str",15]]],[[],["string",3]],[[["checkpointmode",4]]],[[["str",15]],[["result",4],["error",3]]],[[["u64",15]],[["result",4],["error",3]]],[[],["bool",15]],[[],["str",15]],[[],["error",3]],[[],["error",3]],[[],["error",3]],[[],["chain",3]],[[],["error",8]],[[],["bool",15]],[[],[["error",3],["result",4]]],[[],["option",4]],[[],["option",4]]],"p":[[3,"Executor"],[4,"WriteToFileSerializer"],[3,"ArgminSlogKV"],[4,"ArgminError"],[13,"InvalidParameter"],[13,"NotImplemented"],[13,"NotInitialized"],[13,"ConditionViolated"],[13,"CheckpointNotFound"],[13,"ImpossibleError"],[3,"IterState"],[3,"ArgminKV"],[8,"ArgminDot"],[8,"ArgminWeightedDot"],[8,"ArgminZero"],[8,"ArgminConj"],[8,"ArgminZeroLike"],[8,"ArgminEye"],[8,"ArgminAdd"],[8,"ArgminSub"],[8,"ArgminMul"],[8,"ArgminDiv"],[8,"ArgminScaledAdd"],[8,"ArgminScaledSub"],[8,"ArgminNorm"],[8,"ArgminTranspose"],[8,"ArgminInv"],[8,"ArgminRandom"],[8,"ArgminMinMax"],[8,"Observe"],[4,"ObserverMode"],[3,"OpWrapper"],[3,"ArgminResult"],[4,"CheckpointMode"],[4,"TerminationReason"],[8,"ArgminOp"],[8,"Solver"],[3,"ArgminIterData"],[8,"ArgminLineSearch"],[8,"ArgminTrustRegion"],[8,"ArgminNLCGBetaUpdate"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingSub"],[8,"OverflowingMul"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingSub"],[8,"SaturatingMul"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[4,"BrentError"],[3,"Brent"],[3,"ConjugateGradient"],[3,"NonlinearConjugateGradient"],[3,"FletcherReeves"],[3,"PolakRibiere"],[3,"PolakRibierePlus"],[3,"HestenesStiefel"],[3,"GaussNewtonLS"],[3,"GaussNewton"],[3,"GoldenSectionSearch"],[3,"SteepestDescent"],[3,"Landweber"],[3,"BacktrackingLineSearch"],[8,"LineSearchCondition"],[3,"ArmijoCondition"],[3,"WolfeCondition"],[3,"StrongWolfeCondition"],[3,"GoldsteinCondition"],[3,"HagerZhangLineSearch"],[3,"MoreThuenteLineSearch"],[3,"NelderMead"],[3,"NewtonCG"],[3,"Newton"],[3,"ParticleSwarm"],[3,"Particle"],[3,"BFGS"],[3,"DFP"],[3,"LBFGS"],[3,"SR1"],[3,"SR1TrustRegion"],[4,"SATempFunc"],[3,"SimulatedAnnealing"],[3,"CauchyPoint"],[3,"Dogleg"],[3,"Steihaug"],[3,"TrustRegion"],[3,"NoOperator"],[3,"MinimalNoOperator"],[3,"WriteToFile"],[3,"ArgminSlogLogger"],[3,"Visualizer3d"],[3,"Surface"],[3,"Observer"],[3,"ArgminCheckpoint"],[3,"Error"]]}\
}');
initSearch(searchIndex);